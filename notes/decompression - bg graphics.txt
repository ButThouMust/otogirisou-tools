Otogirisou loads most of its background graphics for the story, and a few other
things, with the graphics control codes like 102C (VFX) or 1036 (IMAGE FADE IN
BLOCK). The main input is a two byte value that uniquely identifies a graphic.

Graphics identifiers are two byte values that range from 0x00 to 0x9E.
Some are animated, some are static. How the animations work is outside the scope
of this document and is not necessary to understand for a translation patch.
However, a very brief explanation is below.

################################################################################
################################################################################

The basic flow for how to get graphics data is:
- Given a gfx ID #, get a pointer to a list of structures.
- Given a structure in the list, get a pointer to a block of header data.
- Right after the header data is the (usually compressed) graphics data itself.

General case:
- The graphic identifier (gfx ID) indexes into a table at $01EEA7. Note that
  each entry is two bytes wide, so take ID value and double it to get offset.

- There are related tables at $01ED69 (ASM code to execute) and $01EFE5 (SFX to
  automatically play) for each gfx ID value. While I have not investigated it
  much, I believe the ASM table is where animations and such work.

- Each table entry is an offset in bank 00 to a list of structures for that
  particular graphic. The first byte at this offset is the number of structures.

- A structure can either be for TILE data, TILEMAP data, or PALETTE data.
  * All three types have, as the first three bytes of a structure, a 24-bit
    pointer to header bytes (see below) for the data.
  * A structure for TILE    data is  6 bytes.
  * A structure for TILEMAP data is 10 bytes.
  * A structure for PALETTE data is  7 bytes.

- Note: The purpose for lists is to group these different data types together,
  and data gets reused between different lists. For example, three lists reuse
  the same tileset and tilemap for the mansion, but have unique palette lists:
  one each for yellow/orange, blue, and red.

- Importantly, you must go to the 24-bit pointer's location and look at the
  header bytes (three LSBs of byte 02) to determine what kind of structure we
  are working with.
  * If byte 02 ends in binary 000 or 001, this is TILE data.
      I found that none of the tile structures in the game use the 001 case.
  * If byte 02 ends in binary 010 or 011, this is TILEMAP data.
      The 011 tilemap case is reserved for Mode 7 graphics. All others use 010.
  * If byte 02 ends in binary 100,        this is PALETTE data.

- On top of this, the header size at the 24-bit pointer is different for each
  type of structure. After the header, comes the actual data we care about.
  * TILE    header size is 4 bytes.
  * TILEMAP header size is 6 bytes.
  * PALETTE header size is 4 bytes.

TILE    data is stored compressed with run-length encoding (RLE). However, the
  raw data you get from decompression is not quite in the standard format for
  SNES 2bpp, 4bpp, or (rarely) 8bpp graphics, and requires some more processing.
  More details about this in a section below.
TILEMAP data is also stored compressed with RLE. Similarly, the raw data you get 
  after decompression needs more processing to use as SNES tilemap entry data.
  More details about this in a section below.
PALETTE data is stored in the uncompressed SNES 15-bit color format.

################################################################################
################################################################################

RLE format for Otogirisou TILEs and TILEMAPs

Assembly code is at $00B29D; this is a pseudocode representation.
Apparently, this is similar to the RLE format used in many Konami NES/FC games.

Read a byte N of data.
While N is NOT 0x80 {
    If 0x00 <= N < 0x80 {
        // MSB clear = run length compression case
        Read a byte B1 of data
        Repeat the byte B1 a total of (N + 1) times

        // example: [04 DA] decompresses to [DA DA DA DA DA]
    }
    Else if 0x81 <= N <= 0xFF {
        // MSB set = literal uncompressed data case
        The number of bytes to copy from the ROM is (N & 0x7F)
        Read this many bytes from the ROM
    }
    N <- next byte
}
// 0x80 is "end of data" case

--------------------

As a table:

  N   | Meaning
------+--------------------------------------------------
00-7F | Read a byte, and write it to output (N + 1) times
80    | End of data
81-FF | Read (N & 0x7F) bytes from ROM into output

################################################################################
################################################################################

TILE storage optimizations:

I recommend reading this article, particularly the Formats section, about how
SNES graphics are stored: https://sneslab.net/wiki/Graphics_Format

The main difference with raw decompressed graphics data here, is that their
graphics bitplanes are NOT intertwined like the standard SNES graphics formats.
Instead, all the rows for a particular bitplane are in one contiguous block.
I found that doing this does make the data compress better under RLE.

For a concrete example, the standard SNES 2bpp format is as below:
(Copied from link above, and modified for brevity: [row, bitplane])
[0, 1] [0, 2] [1, 1] [1, 2] [2, 1] [2, 2] [3, 1] [3, 2]
[4, 1] [4, 2] [5, 1] [5, 2] [6, 1] [6, 2] [7, 1] [7, 2]

The bitplane arrangement for decompressed data here is:
[0, 1] [1, 1] [2, 1] [3, 1] [4, 1] [5, 1] [6, 1] [7, 1]
[0, 2] [1, 2] [2, 2] [3, 2] [4, 2] [5, 2] [6, 2] [7, 2]

Another example with bitplanes 3 and 4 of 4bpp:
[0, 3] [0, 4] [1, 3] [1, 4] [2, 3] [2, 4] [3, 3] [3, 4]
[4, 3] [4, 4] [5, 3] [5, 4] [6, 3] [6, 4] [7, 3] [7, 4]
-------------------------------------------------------
[0, 3] [1, 3] [2, 3] [3, 3] [4, 3] [5, 3] [6, 3] [7, 3]
[0, 4] [1, 4] [2, 4] [3, 4] [4, 4] [5, 4] [6, 4] [7, 4]

In the game, the intertwining of bitplanes, as well as padding the graphics data
to a target bit depth, is performed in software after decompression.

---

These two things are not optimizations per se, but they are worth pointing out.

When the game intertwines the rows, it must know the source bit depth of the
decompressed data, and the target bit depth to pad to. For example, the credits
graphics are 1bpp and get padded to 2bpp. More commonly, 3bpp graphics are all
padded to 4bpp. For these, any empty bitplanes are padded with all [00] bytes.

Some tilesets get padded to 8bpp, because they are used for Mode 7.
Two of these, of which one is a graphic that I felt was necessary to translate,
are unique in that the "container" you get from the raw decompression is a
larger bit depth than the actual graphics data.
Tileset for gfx ID  0x7A:       4bpp in a 5bpp container, padded to 8bpp
Tileset for gfx IDs 0x7B, 0x7C: 2bpp in a 5bpp container, padded to 8bpp
If you open the raw files in a hex editor, you can see that they have extra,
empty bitplanes (groups of 8 [00] bytes).

################################################################################
################################################################################

TILEMAP storage optimizations:

Quick reminder: SNES tilemap entries are two byte values, FEDCBA98 76543210.
Bits 9/8 and the low byte are for tile ID numbers (0x000 to 0x3FF).
Bits C/B/A are the palette number.
Bit D is priority bit, and bits F/E are Y/X flip respectively.

Otogirisou uses two optimizations for storing tilemaps:
- Store the low bytes and high bytes in separate blocks.
  Purpose: take advantage of RLE compression format.
  For example, Otogirisou would encode the 2x2 tilemap [00FF 4001 8002 C003]
  as the byte sequence [FF 01 02 03 ; 00 40 80 C0].
  This compresses poorly with RLE (88 data 80) but demonstrates the separation.
  It works well with compressing large blocks of empty tiles (usually 0000) and
  with compressing blocks of the same two MSBs for the tile ID numbers.

- If ALL of the high bytes are [00], only store and RLE compress the low bytes.
  Purpose: avoid possibly several copies of RLE data like [7F 00] at the end.
  In this case, the game will run code to fill in all the high bytes with [00].

Consequence: The decompressed tilemap will be either W*H bytes or W*H*2 bytes.
If only W*H, you may assume the tilemap will use at most 256 (0x100) tiles, use
palette 0, and will not use BG priority or Y/X flip.

################################################################################
################################################################################

Concrete example of the general case:
Graphics ID 0x5C is for the name entry screen.

The bank offset of the structure is at $01EEA7 + (5C << 1) = $01EF5F (0x0EF5F).
  In this case, the data is [81 C2] -> $00C281 (0x04281).

The byte at 0x04281 is [04], so there are four structures.

Read 3 bytes at 0x04282 for header pointer: [83 DD 07] -> $07DD83 (0x3DD83).
    The (guaranteed) header data at 0x3DD83 is [42 00 00].
    Byte 02 is [00], which ends in binary 000 -> TILE data.
    Because this is TILE data:
    - The full header is 4 bytes at 0x3DD83: [42 00 00 30].
    - Structure size  is 6 bytes at 0x04282: [83 DD 07 00 40 10].
    RLE TILE data ranges from    0x3DD87 to 0x3E2C8 (0x542 bytes).

Skip 6 bytes from start of last tile structure.
Read 3 bytes at 0x04288 for header pointer: [57 C8 07] -> $07C857 (0x3C857).
    The guaranteed header data at 0x3C857 is [06 00 00].
    Byte 02 is [00], which ends in binary 000 -> TILE data.
    Because this is TILE data:
    - The full header is 4 bytes at 0x3C857: [06 00 00 00].
    - Structure size  is 6 bytes at 0x04288: [57 C8 07 00 20 11].
    RLE TILE data ranges from    0x3C85B to 0x3C86D (0x13 bytes).

Skip 6 bytes from start of last tile structure.
Read 3 bytes at 0x0428E for header pointer: [ED E2 07] -> $07E2ED (0x3E2ED).
    The guaranteed header data at 0x3E2ED is [00 08 02].
    Byte 02 is [02], which ends in binary 010 -> TILEMAP data.
    Because this is TILEMAP data:
    - The full header is 6  bytes at 0x3E2ED: [00 08 02 01 20 1C].
    - Structure size is 10 bytes at 0x0428E: [ED E2 07 00 10 00 08 00 00 00]
    RLE TILEMAP data ranges from  0x3E2F3 - 0x3E632 (0x340 bytes).

Skip 10 bytes from start of last tilemap structure.
Read 3 bytes at 0x04298 for header pointer: [C9 E2 07] -> $07E2C9 (0x3E2C9).
    The guaranteed header data at 0x3E2C9 is [23 00 04].
    Byte 02 is [04], which ends in binary 100 -> PALETTE data.
    Because this is PALETTE data:
    - The full header is 4 bytes at 0x3E2ED: [23 00 04 00].
    - Structure size is 7 bytes at 0x0428E: [ED E2 07 00 10 00 08]
    Palette data is [23] - 3 bytes = 0x20 (32 bytes = 16 color values).

################################################################################
################################################################################

Metadata explanations (fill in important info as needed or as you find it):

TILE structure data:
(Bytes 0, 1, 2: Pointer to header)

Bytes 3 and 4: VRAM word address for where to write the tileset's graphics data.

Byte 5: Bit flags about target bit depth, generating an empty tile as tile 00,
        and marking graphics as being for Mode 7. Specifically:
- LSB 0 -> create empty tile; LSB 1 -> do not create one (usually sprite data)
- Bits 5 and 4 specify a target bit depth of either 2, 4, or 8 bpp.
  * 0b00 -> 2bpp, 0b01 -> 4bpp, 0b10 -> 8bpp, 0b11 undefined behavior
- MSB is set for tilesets that get converted to Mode 7 format

---

TILE header data:
Bytes 0 and 1 indicate the number of tiles (000 ID for empty not counted).
Above example: header data at 0x3DD83 [42 00 00 30] -> 0x0042 tiles

Byte 2: Structure type indicator byte (type 00 or 01). Any other purpose?

Byte 3: Bits 4-6 (binary: -XXX----) are used to indicate the bit depth of the
        container you get from the raw decompression. Specifically, the bit depth
        is ((byte3 >> 4) & 0x7) + 1. Values I found for this were:
        [00] 1bpp, [10] 2bpp, [20] 3bpp, [30] 4bpp, [40] 5bpp*, [70] 8bpp

If you know the size of the decompressed graphics, you can estimate/confirm the
bit depth against byte 3. In this case, the graphics decompress to 0x840 bytes.

0x840 bytes / 0x42 tiles = 0x20 bytes per 8x8 tile. Do some unit conversions:
32 bytes/tile * 8 bits/byte * (1 tile/64 pixels) = 4 bits/pixel = 4bpp
So the formula is: bit_depth = decomp_size_bytes / num_tiles / 8

------------------------------

TILEMAP structure data:
- (Bytes 0, 1, 2: Pointer to header)

- Bytes 3, 4: VRAM word address to write the tilemap data into.

- Bytes 5, 6, 7: ?? Might have something to do with a WRAM offset? Usually [00 08 00]
  Exceptions: 0x3DFE in $B5C5; 0x0000 in Mode 7 ($C06D, $C085, $C0A7, $C0BF, $C161);
              0x1170 in $C125; 0x2000 for credits tilemaps; 0x3880 in $C29F;
              0x2334, 0x2398 for "the end" gfx; 0x19F7 in $C358

- Bytes 8, 9: Encodes the position of where to draw the the top left tile of the
  tilemap "on screen," or perhaps more precisely where in a background layer.

  Specific formulas:                           Visual data layout (bits)
  X = (byte9 & 0xF) | ((byte8 << 2) & 0x30)        88888888 99999999
  Y = ((byte9 >> 4) & 0xF) | (byte8 & 0x30)          yyxx   YYYYXXXX
 
  For example, if you have the bytes [10 1E], the position would be (0xE, 0x11):
  X = (1E & F) | ((10 << 2) & 30) = E | (40 & 30) = E   00010000 00011110
  Y = ((1E >> 4) & F) | (10 & 30) = (1 & F) | 10 = 11     yyxx   YYYYXXXX

---

TILEMAP header data:
- Bytes 0, 1: Not sure, usually [00 08].

- Byte 2: Type indicator byte for normal or Mode 7 tilemap. Anything else?

- Byte 3 is a flag with 3 possible values:
  * 00 = high bytes not included, assumed to be all 00
  * 01 = high bytes with low bytes (each set is in its own W*H byte block)
  * 80 = similar to 00 case, but indicates the tilemap is for Mode 7 graphics

- Bytes 4 and 5 indicate the tilemap dimensions [WW HH].
  Above example: header at 0x3E2ED [00 08 02 01 20 1C] -> W = 0x20, H = 0x1C

As a consequence, formula for target size of uncompressed tilemap data:
uncomp_tilemap_size = [(byte3 & 0x1) + 1] * byte4 * byte5

------------------------------

PALETTE structure data:
- (Bytes 0, 1, 2: Pointer to header data)

- Byte 3: Starting index in CGRAM to write color data into.

- Bytes 4, 5, 6: ?? Typically the sequence is [80 00 00]
  Exceptions:
  * [80 00 80] for $00C0A7, $00C33C, $00C34A
  * [80 03 00] for $00B5EB
  * [80 04 3B] for $00B601

---

PALETTE header data:
- Byte 0 = data block size including the other 3 header bytes.
  So # colors here = (byte0 - 3) >> 1. The last color value has its MSB set.

- Byte 2 = Structure type indicator: [04].

- Byte 1, 3 = ?? Typically, both are [00].

--- 

Unknown: The game typically does not write palette values into CGRAM as a single
contiguous block. How does the game know how/when to "go down a row", and/or
how many should go into one row of colors?

################################################################################
################################################################################

If you were to keep track of the data blocks for all the structures, you would
find some blocks in the ROM that are not accounted for.

Not having associated structures means you cannot, in isolation, know:
- Tilemaps: where (X,Y) they are to be drawn to on screen
- Tiles:    what bit depth to pad to, or if to make empty tile
- Both:     where in VRAM to send the data
- Palettes: where in CGRAM to start writing color data

For context, the graphics are all from $02DA00 - $08D39A (0x13A00 - 0x4539A),
except for one at $00E00C. Six blocks are not covered with structures.
I ultimately opted to hard code this list of pointers into my graphics dumper
because each block can have multiple structures inside.

--------------------

$03B910 - $03B991: Don't know what this is. An animation of some kind, perhaps?
    Tile    header [06 00 00 20]       at $03B910
    Tile    data from $03B914 - $03B981 (0x1B914 - 0x1B981)

    Palette header [0F 00 04 00]       at $03B982
    Palette data from $03B986 - $03B991 (0x1B986 - 0x1B991)

--------------------

$079653 - $079A05: Graphics data for a seemingly unused picture of a knife.
    Pointers are unknown.
    Tile    header [2C 00 00 20]       at $079653
    Tile    data from $079657 - $07997D (0x39657 - 0x3997D)

    Tilemap header [00 08 02 01 0A 12] at $07997E
    Tilemap data from $079984 - $079A05 (0x39984 - 0x39A05)

    To be precise, tilemap (W,H) = (0x0A, 0x12) with high bytes included.
    Strangely, all the high bytes in the tilemap are 00, except one entry FC00.
    This means "use tile ID 000, with Y flip, X flip, high priority, palette 7."
    I don't know the context as to why it uses palette 7 there.

    The palette for a knife graphic that IS used in the game does fit well with
    this unused knife graphic. See $079643 in the data for graphics ID 0x4E.

--------

You can get this unused knife graphic to show up in the game.
In the Japanese game, both graphics IDs 0x4E and 0x52 use the same tileset of a
knife. However, 0x52 is animated, and 0x4E is static. You can repurpose ID 0x4E.

Change the data for the structure list for graphics ID 0x4E, at $00BFB9.
- Alter the tile    data pointer at $00BFBA from [65 91 07] to [53 96 07].
- Alter the tilemap data pointer at $00BFC0 from [BE 95 07] to [7E 99 07].

Alter the top left YX position of the tilemap on screen.
The original data is [10 1E] -> (X, Y) = (0x0E, 0x11).
To center the 0xA*0x12 tilemap on a 0x20*0x1E screen:
- X = (0x20-0x A)/2 = 0x0B (00 1011) | Assemble into the correct format:
- Y = (0x1E-0x12)/2 = 0x06 (00 0110) | __00 00__ 0110 1011 -> 00 6B
- Put [00 6B] into the position $00BFC8.

Optional: Have the script start on a screen that uses graphics ID 0x4E.
- It turns out there is exactly one: $1CC93D-5, [ED 49 E6] in the Japanese game.
- For incorporating into a translation patch, leave the start points alone.

--------------------

$07C6B9 - $07C856: Two separate things here.

$07C6B9 - $07C7FD: Block of 4bpp graphics for the digits 0 to 9. Unused?
    This data is uncompressed and is, as far as I can tell, the only thing you
    can directly see if you open the game in a tile editor.

    Header data [42 01 00 0A 0C 00]   at $07C6B9.
    Graphics data:    $07C6BF - $07C7FD (0x3C6BF - 0x3C7FD)
    Incidentally, 0x142 is the difference between $07C7FD and $07C6BB, after the
        two bytes [42 01]. Size marker? I don't know, this is unique.

$07C7FE - $07C856: Tile/palette data for "advance text" and "next page" icons.

    Tile    header [08 00 00 10]      at $07C7FE.
    Tile    data from $07C802 - $07C84A (0x3C802 - 0x3C84A)
    Pointer split up at $0096B5 and $0096BA.

    Palette header [0B 00 04 00]      at $07C84B
    Palette data from $07C84F - $07C856 (0x3C84F - 0x3C856)

--------------------

$07DCF3 - $07DD4C: Two groups of palette data. The second is for the animation
    where a tree is struck by lightning and splits in half. The first one is an
    unused variation using a grayscale palette instead of a red/yellow palette.

    Palette header [2B 00 04 00]      at $07DCF3
    Palette data from $07DCF7 - $07DD1E (0x3DCF7 - 0x3DD1E)

    Palette header [2D 00 04 00]      at $07DD1F
    Palette data from $07DD23 - $07DD4C (0x3DD23 - 0x3DD4C)

    Pointer for the latter is hidden in the data in $00D7BF: [1F DD 87].
    Code @ $00D6D2 accesses it: LDX #$D7BF ; JSR $DF53.         ^
    You can see the gray colors if you change the pointer [1F DD] to [F3 DC].

--------------------

$07F38B - $07F57C: Three groups of palette data related to the bookmarks on the
    title screen. Specifically, this contains the palette cycle values for the
    bookmarks' flashing effect. Each group has 8 blocks of 0xA colors.

    Yellow bookmark: $07F38B - see $02BE47, LDA.L $07F391,X
    Palette header [A5 00 04 00]      at $07F38B
    Palette data from $07F38F - $07F430 (0x3F38F - 0x3F430)

    Pink bookmark:   $07F431 - see $02BE4E, LDA.L $07F437,X
    Palette header [A5 00 04 00]      at $07F431
    Palette data from $07F435 - $07F4D6 (0x3F435 - 0x3F4D6)

    Bookmark ribbon: $07F4D7 - see $02BE55, LDA.L $07F4DD,X
    Palette header [A5 00 04 00]      at $07F4D7
    Palette data from $07F4DB - $07F57C (0x3F4DB - 0x3F57C)

--------------------

$0889E5 - $0889F9: Don't know for sure what this tilemap is for. Based on nearby
    data blocks in the ROM, it may be related to ID 0x96: tile data in $07FE3E,
    and palette data in $088850. When I tried combining the three in YY-CHR and
    Tilemap Studio, the resulting picture was a color gradient that increased in
    brightness from top (darker) to bottom (brighter).

    Tilemap header [00 08 02 01 20 07] at $0889E5
    Tilemap data from $0889EB - $0889F9 (0x409EB - 0x409F9).
    The tilemap dimensions are 0x20 * 0x07, with high bytes included.
    Perhaps note that all of the high bytes are [04], i.e. all palette 01.

################################################################################
################################################################################

Other notes:

While most of the game's graphics do not have any text in them, several of them
do. Below is a table of those graphics:

  ID  | ptr  | description
------+------+-----------------------------------------------------------
 0x0C | B765 | desk with dictionaries
 0x0D | B787 | dictionary spines
 0x1A | B941 | diary (red)
 0x1B | B963 | diary (blue), shares tileset with 1A
These four use English text, and may need to be translated if you want to
translate the game into another language besides English.

 0x33 | BE73 | newspaper clipping with a prominent headline in Japanese
      |      | explained fine through the novel text

 0x49 | BEFB | two maternity health books
 0x4A | BF1D | one maternity health book (same tileset, different tilemap)
The tops of the books have the text "母子健康手帳", "maternal and child health
notebook" or "maternity health book." Virtually every instance these show up,
the script explains what they are. I think it's okay to leave these alone.

 0x5A | C125 | title screen (title logo)

 0x5B | C29F | file select screen (tiles for file management prompts)
      |      | the bookmark text like "Page N" or "Nth time" is independent

 0x5C | C281 | name entry screen (four buttons in bottom right, plus "NAME" in
             | the top left if translating to a language other than English)

  **  | C161 | credits tiles, credit tilemap "supervisor", 終/完 tiles + palette
      |      | ** same structure pointer shared for IDs 0x5D - 0x65
 0x66 | C1A3 | credit tilemap "planner"
 0x67 | C1AE | credit tilemap "writer"
 0x68 | C1B9 | credit tilemap "art director"
 0x69 | C1C4 | credit tilemap "graphics"
 0x6A | C1CF | credit tilemap "composer"
 0x6B | C1DA | credit tilemap "programming director"
 0x6C | C1E5 | credit tilemap "programmer"
 0x6D | C1F0 | credit tilemap "sound programmer"
 0x6E | C1FB | credit tilemap "original sfx"
 0x6F | C206 | credit tilemap "support pg 1"
 0x70 | C211 | credit tilemap "support pg 2"
 0x71 | C21C | credit tilemap "producer director"
 0x72 | C227 | credit tilemap "(c) chunsoft co. ltd."
 0x73 | C232 | 終 tilemap
 0x74 | C23D | 完 tilemap

 0x7B | C0A7 | 奈美 "Nami" graphic - this one is important to translate in order
      |      | to have the proper effect in the context of the story
